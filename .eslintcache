[{"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\index.js":"1","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\App.js":"2","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\Store.js":"3","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\constants.js":"4","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\QueueScreen.js":"5","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\OrderScreen.js":"6","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\HomeScreen.js":"7","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\ChooseScreen.js":"8","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\AdminScreen.js":"9","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\ReviewScreen.js":"10","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\PaymentScreen.js":"11","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\SelectPaymentScreen.js":"12","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\CompleteOrderScreen.js":"13","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\actions.js":"14","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\styles.js":"15","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\components\\Logo.js":"16"},{"size":257,"mtime":1690564970910,"results":"17","hashOfConfig":"18"},{"size":2367,"mtime":1690564970719,"results":"19","hashOfConfig":"18"},{"size":5286,"mtime":1690577201121,"results":"20","hashOfConfig":"18"},{"size":1202,"mtime":1690564970852,"results":"21","hashOfConfig":"18"},{"size":1805,"mtime":1690577364757,"results":"22","hashOfConfig":"18"},{"size":8321,"mtime":1690666306669,"results":"23","hashOfConfig":"18"},{"size":1161,"mtime":1690684467275,"results":"24","hashOfConfig":"18"},{"size":2493,"mtime":1690685013379,"results":"25","hashOfConfig":"18"},{"size":4171,"mtime":1690577297504,"results":"26","hashOfConfig":"18"},{"size":6131,"mtime":1690564971700,"results":"27","hashOfConfig":"18"},{"size":1022,"mtime":1690564971544,"results":"28","hashOfConfig":"18"},{"size":2393,"mtime":1690564971780,"results":"29","hashOfConfig":"18"},{"size":2081,"mtime":1690564971300,"results":"30","hashOfConfig":"18"},{"size":3179,"mtime":1690564970806,"results":"31","hashOfConfig":"18"},{"size":1951,"mtime":1690684444298,"results":"32","hashOfConfig":"18"},{"size":291,"mtime":1690667940691,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1u9rhrn",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\index.js",[],["70","71"],"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\App.js",[],"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\Store.js",[],"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\constants.js",[],"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\QueueScreen.js",[],"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\OrderScreen.js",["72"],"import React, { useContext, useEffect, useState } from 'react';\nimport { Store } from '../Store';\nimport {\n  addToOrder,\n  clearOrder,\n  listCategories,\n  listProducts,\n  removeFromOrder,\n} from '../actions';\nimport {\n  Avatar,\n  Box,\n  Button,\n  Card,\n  CardActionArea,\n  CardContent,\n  CardMedia,\n  CircularProgress,\n  Dialog,\n  DialogTitle,\n  Grid,\n  List,\n  ListItem,\n  Slide,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport { Alert } from '@material-ui/lab';\nimport { useStyles } from '../styles';\nimport Logo from '../components/Logo';\nexport default function OrderScreen(props) {\n  const styles = useStyles();\n  const { state, dispatch } = useContext(Store);\n  const { categories, loading, error } = state.categoryList;\n  const {\n    products,\n    loading: loadingProducts,\n    error: errorProducts,\n  } = state.productList;\n  const {\n    orderItems,\n    itemsCount,\n    totalPrice,\n    taxPrice,\n    orderType,\n  } = state.order;\n\n  const [categoryName, setCategoryName] = useState('');\n\n  const [quantity, setQuantity] = useState(1);\n  const [isOpen, setIsOpen] = useState(false);\n  const [product, setProduct] = useState({});\n  const closeHandler = () => {\n    setIsOpen(false);\n  };\n  const productClickHandler = (p) => {\n    setProduct(p);\n    setIsOpen(true);\n  };\n  const addToOrderHandler = () => {\n    addToOrder(dispatch, { ...product, quantity });\n    setIsOpen(false);\n  };\n  const cancelOrRemoveFromOrder = () => {\n    removeFromOrder(dispatch, product);\n    setIsOpen(false);\n  };\n  const previewOrderHandler = () => {\n    props.history.push(`/review`);\n  };\n  useEffect(() => {\n    if (!categories) {\n      listCategories(dispatch);\n    } else {\n      listProducts(dispatch, categoryName);\n    }\n  }, [categories, categoryName]);\n\n  const categoryClickHandler = (name) => {\n    setCategoryName(name);\n    listProducts(dispatch, categoryName);\n  };\n\n  return (\n    <Box className={styles.root}>\n      <Box className={styles.main}>\n        <Dialog\n          onClose={closeHandler}\n          aria-labelledby=\"max-width-dialog-title\"\n          open={isOpen}\n          fullWidth={true}\n          maxWidth=\"sm\"\n        >\n          <DialogTitle className={styles.center}>\n            Add {product.name}\n          </DialogTitle>\n          <Box className={[styles.row, styles.center]}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={quantity === 1}\n              onClick={(e) => quantity > 1 && setQuantity(quantity - 1)}\n            >\n              <RemoveIcon />\n            </Button>\n            <TextField\n              inputProps={{ className: styles.largeInput }}\n              InputProps={{\n                bar: true,\n                inputProps: {\n                  className: styles.largeInput,\n                },\n              }}\n              className={styles.largeNumber}\n              type=\"number\"\n              variant=\"filled\"\n              min={1}\n              value={quantity}\n            />\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={(e) => setQuantity(quantity + 1)}\n            >\n              <AddIcon />\n            </Button>\n          </Box>\n          <Box className={[styles.row, styles.around]}>\n            <Button\n              onClick={cancelOrRemoveFromOrder}\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"large\"\n              className={styles.largeButton}\n            >\n              {orderItems.find((x) => x.name === product.name)\n                ? 'Remove From Order'\n                : 'Cancel'}\n            </Button>\n\n            <Button\n              onClick={addToOrderHandler}\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"large\"\n              className={styles.largeButton}\n            >\n              ADD To Order\n            </Button>\n          </Box>\n        </Dialog>\n\n        <Grid container>\n          <Grid item md={2}>\n            <List>\n              {loading ? (\n                <CircularProgress />\n              ) : error ? (\n                <Alert severity=\"error\">{error}</Alert>\n              ) : (\n                <>\n                  <ListItem button onClick={() => categoryClickHandler('')}>\n                    <Logo></Logo>\n                  </ListItem>\n                  {categories.map((category) => (\n                    <ListItem\n                      key={category.name}\n                      button\n                      onClick={() => categoryClickHandler(category.name)}\n                    >\n                      <Avatar alt={category.name} src={category.image} />\n                    </ListItem>\n                  ))}\n                </>\n              )}\n            </List>\n          </Grid>\n          <Grid item md={10}>\n            <Typography\n              gutterBottom\n              className={styles.title}\n              variant=\"h2\"\n              component=\"h2\"\n            >\n              {categoryName || 'Main Menu'}\n            </Typography>\n\n            <Grid container spacing={1}>\n              {loadingProducts ? (\n                <CircularProgress />\n              ) : errorProducts ? (\n                <Alert severity=\"error\">{errorProducts}</Alert>\n              ) : (\n                products.map((product) => (\n                  <Slide key={product.name} direction=\"up\" in={true}>\n                    <Grid item md={6}>\n                      <Card\n                        className={styles.card}\n                        onClick={() => productClickHandler(product)}\n                      >\n                        <CardActionArea>\n                          <CardMedia\n                            component=\"img\"\n                            alt={product.name}\n                            image={product.image}\n                            className={styles.media}\n                          />\n                          <CardContent>\n                            <Typography\n                              gutterBottom\n                              variant=\"body2\"\n                              color=\"textPrimary\"\n                              component=\"p\"\n                            >\n                              {product.name}\n                            </Typography>\n                            <Box className={styles.cardFooter}>\n                              <Typography\n                                variant=\"body2\"\n                                color=\"textSecondary\"\n                                component=\"p\"\n                              >\n                                {product.calorie} Cal\n                              </Typography>\n                              <Typography\n                                variant=\"body2\"\n                                color=\"textPrimary\"\n                                component=\"p\"\n                              >\n                                ${product.price}\n                              </Typography>\n                            </Box>\n                          </CardContent>\n                        </CardActionArea>\n                      </Card>\n                    </Grid>\n                  </Slide>\n                ))\n              )}\n            </Grid>\n          </Grid>\n        </Grid>\n      </Box>\n      <Box>\n        <Box>\n          <Box className={[styles.bordered, styles.space]}>\n            My Order - {orderType} | Tax: ${taxPrice} | Total: ${totalPrice} |\n            Items: {itemsCount}\n          </Box>\n          <Box className={[styles.row, styles.around]}>\n            <Button\n              onClick={() => {\n                clearOrder(dispatch);\n                props.history.push(`/`);\n              }}\n              variant=\"contained\"\n              color=\"primary\"\n              className={styles.largeButton}\n            >\n              Cancel Order\n            </Button>\n\n            <Button\n              onClick={previewOrderHandler}\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={orderItems.length === 0}\n              className={styles.largeButton}\n            >\n              Done\n            </Button>\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\HomeScreen.js",["73"],"import React from 'react';\nimport { Box, Card, CardActionArea, Typography } from '@material-ui/core';\nimport TouchAppIcon from '@material-ui/icons/TouchApp';\nimport { useStyles } from '../styles';\nimport Logo from '../components/Logo';\nexport default function HomeScreen(props) {\n  const styles = useStyles();\n  return (\n    <Card>\n      <CardActionArea onClick={() => props.history.push('/choose')}>\n        <Box className={[styles.root, styles.red]}>\n          <Box className={[styles.main, styles.center]}>\n            <Typography variant=\"h6\" component=\"h6\">\n              Fast & Easy\n            </Typography>\n            <Typography variant=\"h1\" component=\"h1\" className={styles.bold}>\n              Order <br />\n              & pay\n              <br />\n              here!\n            </Typography>\n            <TouchAppIcon fontSize=\"large\"></TouchAppIcon>\n          </Box>\n          <Box className={[styles.center, styles.green]}>\n         \n            <Typography variant=\"h5\" component=\"h3\" className={styles.footer} >\n              Touch to Start!\n            </Typography>\n          </Box>\n        </Box>\n      </CardActionArea>\n    </Card>\n  );\n}\n","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\ChooseScreen.js",[],"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\AdminScreen.js",[],"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\ReviewScreen.js",[],"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\PaymentScreen.js",[],"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\SelectPaymentScreen.js",[],"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\CompleteOrderScreen.js",["74"],"import React, { useContext, useEffect } from 'react';\nimport { Box, Button, CircularProgress, Typography } from '@material-ui/core';\nimport { useStyles } from '../styles';\nimport Logo from '../components/Logo';\nimport { Store } from '../Store';\nimport { Alert } from '@material-ui/lab';\nimport { createOrder } from '../actions';\nexport default function CompleteOrderScreen(props) {\n  const styles = useStyles();\n  const { state, dispatch } = useContext(Store);\n  const { order } = state;\n  const { loading, error, newOrder } = state.orderCreate;\n\n  useEffect(() => {\n    if (order.orderItems.length > 0) {\n      createOrder(dispatch, order);\n    }\n  }, [order]);\n\n  return (\n    <Box className={[styles.root, styles.navy]}>\n      <Box className={[styles.main, styles.center]}>\n        <Box>\n          <Logo large></Logo>\n          {loading ? (\n            <CircularProgress></CircularProgress>\n          ) : error ? (\n            <Alert severity=\"error\">{error}</Alert>\n          ) : (\n            <>\n              <Typography\n                gutterBottom\n                className={styles.title}\n                variant=\"h3\"\n                component=\"h3\"\n              >\n                Your order has been placed\n              </Typography>\n              <Typography\n                gutterBottom\n                className={styles.title}\n                variant=\"h1\"\n                component=\"h1\"\n              >\n                Thank you!\n              </Typography>\n              <Typography\n                gutterBottom\n                className={styles.title}\n                variant=\"h3\"\n                component=\"h3\"\n              >\n                Your order number is {newOrder.number}\n              </Typography>\n            </>\n          )}\n        </Box>\n      </Box>\n      <Box className={[styles.center, styles.space]}>\n        <Button\n          onClick={() => props.history.push('/')}\n          variant=\"contained\"\n          color=\"primary\"\n          className={styles.largeButton}\n        >\n          Order Again\n        </Button>\n      </Box>\n    </Box>\n  );\n}\n","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\actions.js",[],"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\styles.js",[],"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\components\\Logo.js",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":79,"column":6,"nodeType":"81","endLine":79,"endColumn":32,"suggestions":"82"},{"ruleId":"83","severity":1,"message":"84","line":5,"column":8,"nodeType":"85","messageId":"86","endLine":5,"endColumn":12},{"ruleId":"79","severity":1,"message":"80","line":18,"column":6,"nodeType":"81","endLine":18,"endColumn":13,"suggestions":"87"},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["90"],"no-unused-vars","'Logo' is defined but never used.","Identifier","unusedVar",["91"],"no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},"Update the dependencies array to be: [categories, categoryName, dispatch]",{"range":"96","text":"97"},"Update the dependencies array to be: [dispatch, order]",{"range":"98","text":"99"},[1835,1861],"[categories, categoryName, dispatch]",[653,660],"[dispatch, order]"]