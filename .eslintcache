[{"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\index.js":"1","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\App.js":"2","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\Store.js":"3","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\constants.js":"4","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\QueueScreen.js":"5","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\OrderScreen.js":"6","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\HomeScreen.js":"7","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\ChooseScreen.js":"8","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\AdminScreen.js":"9","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\ReviewScreen.js":"10","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\PaymentScreen.js":"11","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\SelectPaymentScreen.js":"12","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\CompleteOrderScreen.js":"13","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\actions.js":"14","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\styles.js":"15","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\components\\Logo.js":"16","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\components\\Keypad.js":"17"},{"size":268,"mtime":1691023929410,"results":"18","hashOfConfig":"19"},{"size":2454,"mtime":1691104152449,"results":"20","hashOfConfig":"19"},{"size":5481,"mtime":1691101017261,"results":"21","hashOfConfig":"19"},{"size":1229,"mtime":1691023929407,"results":"22","hashOfConfig":"19"},{"size":1871,"mtime":1691023929432,"results":"23","hashOfConfig":"19"},{"size":8600,"mtime":1691101456016,"results":"24","hashOfConfig":"19"},{"size":1340,"mtime":1691100287572,"results":"25","hashOfConfig":"19"},{"size":2576,"mtime":1691100450445,"results":"26","hashOfConfig":"19"},{"size":4171,"mtime":1691104168243,"results":"27","hashOfConfig":"19"},{"size":6427,"mtime":1691023929436,"results":"28","hashOfConfig":"19"},{"size":1951,"mtime":1691023929430,"results":"29","hashOfConfig":"19"},{"size":2613,"mtime":1691023929440,"results":"30","hashOfConfig":"19"},{"size":2155,"mtime":1691023929422,"results":"31","hashOfConfig":"19"},{"size":3319,"mtime":1691023929391,"results":"32","hashOfConfig":"19"},{"size":2714,"mtime":1691101289153,"results":"33","hashOfConfig":"19"},{"size":304,"mtime":1691023929402,"results":"34","hashOfConfig":"19"},{"size":616,"mtime":1691023929400,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1u9rhrn",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\index.js",[],["77","78"],"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\App.js",[],"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\Store.js",[],"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\constants.js",[],"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\QueueScreen.js",[],"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\OrderScreen.js",["79"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { Store } from '../Store';\r\nimport {\r\n  addToOrder,\r\n  clearOrder,\r\n  listCategories,\r\n  listProducts,\r\n  removeFromOrder,\r\n} from '../actions';\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardActionArea,\r\n  CardContent,\r\n  CardMedia,\r\n  CircularProgress,\r\n  Dialog,\r\n  DialogTitle,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  Slide,\r\n  TextField,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { useStyles } from '../styles';\r\nimport Logo from '../components/Logo';\r\nexport default function OrderScreen(props) {\r\n  const styles = useStyles();\r\n  const { state, dispatch } = useContext(Store);\r\n  const { categories, loading, error } = state.categoryList;\r\n  const {\r\n    products,\r\n    loading: loadingProducts,\r\n    error: errorProducts,\r\n  } = state.productList;\r\n  const {\r\n    orderItems,\r\n    itemsCount,\r\n    totalPrice,\r\n    taxPrice,\r\n    orderType,\r\n  } = state.order;\r\n\r\n  const [categoryName, setCategoryName] = useState('');\r\n\r\n  const [quantity, setQuantity] = useState(1);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [product, setProduct] = useState({});\r\n  const closeHandler = () => {\r\n    setIsOpen(false);\r\n  };\r\n  const productClickHandler = (p) => {\r\n    setProduct(p);\r\n    setIsOpen(true);\r\n  };\r\n  const addToOrderHandler = () => {\r\n    addToOrder(dispatch, { ...product, quantity });\r\n    setIsOpen(false);\r\n  };\r\n  const cancelOrRemoveFromOrder = () => {\r\n    removeFromOrder(dispatch, product);\r\n    setIsOpen(false);\r\n  };\r\n  const previewOrderHandler = () => {\r\n    props.history.push(`/review`);\r\n  };\r\n  useEffect(() => {\r\n    if (!categories) {\r\n      listCategories(dispatch);\r\n    } else {\r\n      listProducts(dispatch, categoryName);\r\n    }\r\n  }, [categories, categoryName]);\r\n\r\n  const categoryClickHandler = (name) => {\r\n    setCategoryName(name);\r\n    listProducts(dispatch, categoryName);\r\n  };\r\n\r\n  return (\r\n    <Box className={styles.root}>\r\n      <Box className={styles.main}>\r\n        <Dialog\r\n          onClose={closeHandler}\r\n          aria-labelledby=\"max-width-dialog-title\"\r\n          open={isOpen}\r\n          fullWidth={true}\r\n          maxWidth=\"sm\"\r\n        >\r\n          <DialogTitle className={styles.center}>\r\n            Add {product.name}\r\n          </DialogTitle>\r\n          <Box className={[styles.row, styles.center]}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              disabled={quantity === 1}\r\n              onClick={(e) => quantity > 1 && setQuantity(quantity - 1)}\r\n            >\r\n              <RemoveIcon />\r\n            </Button>\r\n            <TextField\r\n              inputProps={{ className: styles.largeInput }}\r\n              InputProps={{\r\n                bar: true,\r\n                inputProps: {\r\n                  className: styles.largeInput,\r\n                },\r\n              }}\r\n              className={styles.largeNumber}\r\n              type=\"number\"\r\n              variant=\"filled\"\r\n              min={1}\r\n              value={quantity}\r\n            />\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={(e) => setQuantity(quantity + 1)}\r\n            >\r\n              <AddIcon />\r\n            </Button>\r\n          </Box>\r\n          <Box className={[styles.row, styles.around]}>\r\n            <Button\r\n              onClick={cancelOrRemoveFromOrder}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"large\"\r\n              className={styles.largeButton}\r\n            >\r\n              {orderItems.find((x) => x.name === product.name)\r\n                ? 'Remove From Order'\r\n                : 'Cancel'}\r\n            </Button>\r\n\r\n            <Button\r\n              onClick={addToOrderHandler}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"large\"\r\n              className={styles.largeButton}\r\n            >\r\n              ADD To Order\r\n            </Button>\r\n          </Box>\r\n        </Dialog>\r\n\r\n        <Grid container>\r\n          <Grid item md={2}>\r\n            <List>\r\n              {loading ? (\r\n                <CircularProgress />\r\n              ) : error ? (\r\n                <Alert severity=\"error\">{error}</Alert>\r\n              ) : (\r\n                <>\r\n                  <ListItem button onClick={() => categoryClickHandler('')}>\r\n                    <Logo></Logo>\r\n                  </ListItem>\r\n                  {categories.map((category) => (\r\n                    <ListItem\r\n                      key={category.name}\r\n                      button\r\n                      onClick={() => categoryClickHandler(category.name)}\r\n                    >\r\n                      <Avatar alt={category.name} src={category.image} />\r\n                    </ListItem>\r\n                  ))}\r\n                </>\r\n              )}\r\n            </List>\r\n          </Grid>\r\n          <Grid item md={10}>\r\n            <Typography\r\n              gutterBottom\r\n              className={styles.title}\r\n              variant=\"h2\"\r\n              component=\"h2\"\r\n            >\r\n              {categoryName || 'Main Menu'}\r\n            </Typography>\r\n\r\n            <Grid container spacing={1}>\r\n              {loadingProducts ? (\r\n                <CircularProgress />\r\n              ) : errorProducts ? (\r\n                <Alert severity=\"error\">{errorProducts}</Alert>\r\n              ) : (\r\n                products.map((product) => (\r\n                  <Slide key={product.name} direction=\"up\" in={true}>\r\n                    <Grid item md={6}>\r\n                      <Card\r\n                        className={styles.card}\r\n                        onClick={() => productClickHandler(product)}\r\n                      >\r\n                        <CardActionArea>\r\n                          <CardMedia\r\n                            component=\"img\"\r\n                            alt={product.name}\r\n                            image={product.image}\r\n                            className={styles.media}\r\n                          />\r\n                          <CardContent>\r\n                            <Typography\r\n                              gutterBottom\r\n                              variant=\"body2\"\r\n                              color=\"textPrimary\"\r\n                              component=\"p\"\r\n                            >\r\n                              {product.name}\r\n                            </Typography>\r\n                            <Box className={styles.cardFooter}>\r\n                              <Typography\r\n                                variant=\"body2\"\r\n                                color=\"textSecondary\"\r\n                                component=\"p\"\r\n                              >\r\n                                {product.calorie} Cal\r\n                              </Typography>\r\n                              <Typography\r\n                                variant=\"body2\"\r\n                                color=\"textPrimary\"\r\n                                component=\"p\"\r\n                              >\r\n                                ${product.price}\r\n                              </Typography>\r\n                            </Box>\r\n                          </CardContent>\r\n                        </CardActionArea>\r\n                      </Card>\r\n                    </Grid>\r\n                  </Slide>\r\n                ))\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n      <Box>\r\n        <Box>\r\n          <Box className={[styles.bordered, styles.space]}>\r\n            My Order - {orderType} | Tax: ${taxPrice} | Total: ${totalPrice} |\r\n            Items: {itemsCount}\r\n          </Box>\r\n          <Box className={[styles.row, styles.around]}>\r\n            <Button\r\n              onClick={() => {\r\n                clearOrder(dispatch);\r\n                props.history.push(`/`);\r\n              }}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={styles.largeButton}\r\n            >\r\n              Cancel Order\r\n            </Button>\r\n\r\n            <Button\r\n              onClick={previewOrderHandler}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              disabled={orderItems.length === 0}\r\n              className={styles.largeButton}\r\n            >\r\n              Done\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\HomeScreen.js",["80"],"import React from 'react';\r\nimport { Box, Card, CardActionArea, Typography } from '@material-ui/core';\r\nimport TouchAppIcon from '@material-ui/icons/TouchApp';\r\nimport RestIcon from '@material-ui/icons/FastfoodOutlined';\r\n\r\nimport { useStyles } from '../styles';\r\nimport Logo from '../components/Logo';\r\n                    //background is white.\r\n\r\nexport default function HomeScreen(props) {\r\n  const styles = useStyles();\r\n  return (\r\n    <Card>\r\n      <CardActionArea onClick={() => props.history.push('/choose')}>\r\n        <Box className={[styles.root, styles.main]}>  \r\n          <Box className={[styles.main, styles.center]}>\r\n            <Typography variant=\"h8\" component=\"h5\">\r\n            Daddy's  || Soulfood  &  ||  Grille         \r\n \r\n            </Typography>\r\n            <Typography variant=\"h1\" component=\"h1\" className={styles.bold}>\r\n              Order <br />\r\n              <RestIcon/>\r\n              <br />\r\n              Here!\r\n            </Typography>\r\n            <TouchAppIcon fontSize=\"large\"></TouchAppIcon>\r\n          </Box>\r\n          <Box className={[styles.center, styles.white]}>\r\n         \r\n            <Typography variant=\"h4\" component=\"h1\" className={styles.footer} >\r\n            Easy Kiosk\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      </CardActionArea>\r\n    </Card>\r\n  );\r\n}\r\n","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\ChooseScreen.js",[],"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\AdminScreen.js",[],"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\ReviewScreen.js",["81"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { Store } from '../Store';\r\nimport { addToOrder, removeFromOrder } from '../actions';\r\nimport { Route, Link } from 'react-router-dom';\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardActionArea,\r\n  CardContent,\r\n  Dialog,\r\n  DialogTitle,\r\n  Grid,\r\n  TextField,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport { useStyles } from '../styles';\r\nimport Logo from '../components/Logo';\r\nexport default function ReviewScreen(props) {\r\n  const styles = useStyles();\r\n  const { state, dispatch } = useContext(Store);\r\n  const {\r\n    orderItems,\r\n    itemsCount,\r\n    totalPrice,\r\n    taxPrice,\r\n    orderType,\r\n  } = state.order;\r\n  const [quantity, setQuantity] = useState(1);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [product, setProduct] = useState({});\r\n  const closeHandler = () => {\r\n    setIsOpen(false);\r\n  };\r\n  const productClickHandler = (p) => {\r\n    setProduct(p);\r\n    setIsOpen(true);\r\n  };\r\n  const addToOrderHandler = () => {\r\n    addToOrder(dispatch, { ...product, quantity });\r\n    setIsOpen(false);\r\n  };\r\n  const cancelOrRemoveFromOrder = () => {\r\n    removeFromOrder(dispatch, product);\r\n    setIsOpen(false);\r\n  };\r\n  const procedToCheckoutHandler = () => {\r\n    // procedToCheckout(dispatch);\r\n    props.history.push('/select-payment');\r\n  };\r\n  useEffect(() => {}, []);\r\n\r\n  return (\r\n    <Box className={[styles.root]}>\r\n      <Box className={[styles.main, styles.navy, styles.center]}>\r\n        <Dialog\r\n          onClose={closeHandler}\r\n          aria-labelledby=\"max-width-dialog-title\"\r\n          open={isOpen}\r\n          fullWidth={true}\r\n          maxWidth=\"sm\"\r\n        >\r\n          <DialogTitle className={styles.center}>\r\n            Add {product.name}\r\n          </DialogTitle>\r\n          <Box className={[styles.row, styles.center]}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              disabled={quantity === 1}\r\n              onClick={(e) => quantity > 1 && setQuantity(quantity - 1)}\r\n            >\r\n              <RemoveIcon />\r\n            </Button>\r\n            <TextField\r\n              inputProps={{ className: styles.largeInput }}\r\n              className={styles.largeNumber}\r\n              type=\"number\"\r\n              min={1}\r\n              variant=\"filled\"\r\n              value={quantity}\r\n            />\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={(e) => setQuantity(quantity + 1)}\r\n            >\r\n              <AddIcon />\r\n            </Button>\r\n          </Box>\r\n          <Box className={[styles.row, styles.around]}>\r\n            <Button\r\n              onClick={cancelOrRemoveFromOrder}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"large\"\r\n              className={styles.largeButton}\r\n            >\r\n              {orderItems.find((x) => x.name === product.name)\r\n                ? 'Remove From Order'\r\n                : 'Cancel'}\r\n            </Button>\r\n\r\n            <Button\r\n              onClick={addToOrderHandler}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"large\"\r\n              className={styles.largeButton}\r\n            >\r\n              ADD To Order\r\n            </Button>\r\n          </Box>\r\n        </Dialog>\r\n        <Box className={[styles.center, styles.column]}>\r\n        <Link to=\"/order\">  <Logo large ></Logo></Link>\r\n          <Typography\r\n            gutterBottom\r\n            className={styles.title}\r\n            variant=\"h3\"\r\n            component=\"h3\"\r\n          >\r\n            Review my {orderType} order\r\n          </Typography>\r\n        </Box>\r\n\r\n        <Grid container>\r\n          {orderItems.map((orderItem) => (\r\n            <Grid item md={12} key={orderItem.name}>\r\n              <Card\r\n                className={styles.card}\r\n                onClick={() => productClickHandler(orderItem)}\r\n              >\r\n                <CardActionArea>\r\n                  <CardContent>\r\n                    <Box className={[styles.row, styles.between]}>\r\n                      <Typography\r\n                        gutterBottom\r\n                        variant=\"body2\"\r\n                        color=\"textPrimary\"\r\n                        component=\"p\"\r\n                      >\r\n                        {orderItem.name}\r\n                      </Typography>\r\n                      <Button variant=\"contained\">Edit</Button>\r\n                    </Box>\r\n\r\n                    <Box className={[styles.row, styles.between]}>\r\n                      <Typography\r\n                        variant=\"body2\"\r\n                        color=\"textSecondary\"\r\n                        component=\"p\"\r\n                      >\r\n                        {orderItem.calorie} calories per item.\r\n                      </Typography>\r\n                      <Typography\r\n                        variant=\"body2\"\r\n                        color=\"textPrimary\"\r\n                        component=\"p\"\r\n                      >\r\n                        {orderItem.quantity} x ${orderItem.price}\r\n                      </Typography>\r\n                    </Box>\r\n                  </CardContent>\r\n                </CardActionArea>\r\n              </Card>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </Box>\r\n      <Box>\r\n        <Box>\r\n          <Box className={[styles.bordered, styles.space]}>\r\n            My Order - {orderType === 'takeout' ? 'Take out' : 'Eat in'} | Tax:\r\n            ${taxPrice} | Total: ${totalPrice} | Items: {itemsCount}\r\n          </Box>\r\n          <Box className={[styles.row, styles.around]}>\r\n            <Button\r\n              onClick={() => {\r\n                props.history.push(`/order`);\r\n              }}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={styles.largeButton}\r\n            >\r\n              Back\r\n            </Button>\r\n\r\n            <Button\r\n              onClick={procedToCheckoutHandler}\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              disabled={orderItems.length === 0}\r\n              className={styles.largeButton}\r\n            >\r\n              Proceed To Checkout\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\PaymentScreen.js",["82"],"import React from 'react';\r\nimport { Box, Button, CircularProgress, Typography } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport { useState } from 'react'; // Import useState from react module\r\n\r\nimport Keypad from '../components/Keypad'; // Import the Keypad component\r\n\r\nimport { useStyles } from '../styles';\r\nimport Logo from '../components/Logo';\r\nexport default function CompleteOrderScreen(props) {\r\n  const styles = useStyles();\r\n  const [pin, setPin] = useState(''); // State to store the entered PIN\r\n\r\n  const handleNumberClick = (number) => {\r\n    // Append the clicked number to the current PIN state\r\n    setPin((prevPin) => prevPin + number);\r\n  };\r\n\r\n  return (\r\n    <Box className={[styles.root, styles.navy]}>\r\n      <Box className={[styles.main, styles.center]}>\r\n        <Box>\r\n          <Link to=\"/order\">\r\n          <Logo large></Logo> </Link>\r\n          <Typography\r\n            gutterBottom\r\n            className={styles.title}\r\n            variant=\"h3\"\r\n            component=\"h3\"\r\n          >\r\n            Please follow the instruction on the PIN pad!\r\n          </Typography>\r\n          <CircularProgress />\r\n         <div className={[styles.center]}>\r\n           {/* Render the Keypad component and pass the handleNumberClick function */}\r\n           <Keypad onNumberClick={handleNumberClick} />\r\n            {/* Display the entered PIN */}\r\n            <Typography variant=\"h4\" component=\"h4\">\r\n              Entered PIN: {pin}\r\n            </Typography>\r\n            <img src=\"/images/pinpad.jpg\" alt=\"Your Image\" />\r\n          </div>\r\n\r\n\r\n        </Box>\r\n      </Box>\r\n      <Box className={[styles.center, styles.space]}>\r\n        <Button\r\n          onClick={() => props.history.push('/complete')}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className={styles.largeButton}\r\n        >\r\n          Complete Order\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\SelectPaymentScreen.js",["83","84"],"import React, { useContext } from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\n\r\n\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardActionArea,\r\n  CardContent,\r\n  CardMedia,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport { useStyles } from '../styles';\r\nimport Logo from '../components/Logo';\r\nimport { setPaymentType } from '../actions';\r\nimport { Store } from '../Store';\r\nimport OrderScreen from './OrderScreen';\r\nexport default function HomeScreen(props) {\r\n  const { dispatch } = useContext(Store);\r\n  const styles = useStyles();\r\n  const selectHandler = (paymentType) => {\r\n    setPaymentType(dispatch, paymentType);\r\n    if (paymentType === 'Pay here') {\r\n      props.history.push('/payment');\r\n    } else {\r\n      props.history.push('/complete');\r\n    }\r\n  };\r\n  return (\r\n    <Box className={[styles.root, styles.navy]}>\r\n      <Box className={[styles.main, styles.center]}>\r\n      <Link to=\"/order\">\r\n            <Logo large />\r\n          </Link>\r\n        <Typography\r\n          className={styles.center}\r\n          gutterBottom\r\n          variant=\"h3\"\r\n          component=\"h3\"\r\n        >\r\n          Select payment type\r\n        </Typography>\r\n        <Box className={styles.cards}>\r\n          <Card className={[styles.card, styles.space]}>\r\n            <CardActionArea onClick={() => selectHandler('Pay here')}>\r\n              <CardMedia\r\n                component=\"img\"\r\n                alt=\"Pay here\"\r\n                image=\"/images/payhere.png\"\r\n                className={styles.media}\r\n              />\r\n              <CardContent>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"h6\"\r\n                  color=\"textPrimary\"\r\n                  component=\"p\"\r\n                >\r\n                  PAY HERE\r\n                </Typography>\r\n              </CardContent>\r\n            </CardActionArea>\r\n          </Card>\r\n          <Card className={[styles.card, styles.space]}>\r\n            <CardActionArea onClick={() => selectHandler('At counter')}>\r\n              <CardMedia\r\n                component=\"img\"\r\n                alt=\"At counter\"\r\n                image=\"/images/atcounter.png\"\r\n                className={styles.media}\r\n              />\r\n              <CardContent>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"h6\"\r\n                  color=\"textPrimary\"\r\n                  component=\"p\"\r\n                >\r\n                  AT COUNTER\r\n                </Typography>\r\n              </CardContent>\r\n            </CardActionArea>\r\n          </Card>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\screens\\CompleteOrderScreen.js",["85"],"import React, { useContext, useEffect } from 'react';\r\nimport { Box, Button, CircularProgress, Typography } from '@material-ui/core';\r\nimport { useStyles } from '../styles';\r\nimport Logo from '../components/Logo';\r\nimport { Store } from '../Store';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { createOrder } from '../actions';\r\nexport default function CompleteOrderScreen(props) {\r\n  const styles = useStyles();\r\n  const { state, dispatch } = useContext(Store);\r\n  const { order } = state;\r\n  const { loading, error, newOrder } = state.orderCreate;\r\n\r\n  useEffect(() => {\r\n    if (order.orderItems.length > 0) {\r\n      createOrder(dispatch, order);\r\n    }\r\n  }, [order]);\r\n\r\n  return (\r\n    <Box className={[styles.root, styles.navy]}>\r\n      <Box className={[styles.main, styles.center]}>\r\n        <Box>\r\n          <Logo large></Logo>\r\n          {loading ? (\r\n            <CircularProgress></CircularProgress>\r\n          ) : error ? (\r\n            <Alert severity=\"error\">{error}</Alert>\r\n          ) : (\r\n            <>\r\n              <Typography\r\n                gutterBottom\r\n                className={styles.title}\r\n                variant=\"h3\"\r\n                component=\"h3\"\r\n              >\r\n                Your order has been placed\r\n              </Typography>\r\n              <Typography\r\n                gutterBottom\r\n                className={styles.title}\r\n                variant=\"h1\"\r\n                component=\"h1\"\r\n              >\r\n                Thank You!\r\n              </Typography>\r\n              <Typography\r\n                gutterBottom\r\n                className={styles.title}\r\n                variant=\"h3\"\r\n                component=\"h3\"\r\n              >\r\n                Your order number is  # {newOrder.number}\r\n              </Typography>\r\n            </>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n      <Box className={[styles.center, styles.space]}>\r\n        <Button\r\n          onClick={() => props.history.push('/')}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className={styles.largeButton}\r\n        >\r\n          Order Again\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\actions.js",[],"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\styles.js",[],"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\components\\Logo.js",[],"C:\\Users\\14144\\Downloads\\self-order-kiosk-final-master\\self-order-kiosk-final-master\\src\\components\\Keypad.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":79,"column":6,"nodeType":"92","endLine":79,"endColumn":32,"suggestions":"93"},{"ruleId":"94","severity":1,"message":"95","line":7,"column":8,"nodeType":"96","messageId":"97","endLine":7,"endColumn":12},{"ruleId":"94","severity":1,"message":"98","line":4,"column":10,"nodeType":"96","messageId":"97","endLine":4,"endColumn":15},{"ruleId":"99","severity":1,"message":"100","line":41,"column":13,"nodeType":"101","endLine":41,"endColumn":62},{"ruleId":"94","severity":1,"message":"98","line":2,"column":10,"nodeType":"96","messageId":"97","endLine":2,"endColumn":15},{"ruleId":"94","severity":1,"message":"102","line":17,"column":8,"nodeType":"96","messageId":"97","endLine":17,"endColumn":19},{"ruleId":"90","severity":1,"message":"91","line":18,"column":6,"nodeType":"92","endLine":18,"endColumn":13,"suggestions":"103"},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["106"],"no-unused-vars","'Logo' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'OrderScreen' is defined but never used.",["107"],"no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},"Update the dependencies array to be: [categories, categoryName, dispatch]",{"range":"112","text":"113"},"Update the dependencies array to be: [dispatch, order]",{"range":"114","text":"115"},[1913,1939],"[categories, categoryName, dispatch]",[670,677],"[dispatch, order]"]