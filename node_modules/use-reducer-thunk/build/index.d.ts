import { Reducer } from "react";
declare type NotFunction<A> = Exclude<A, Function>;
declare type ThunkAction<S, A> = (dispatch: DispatchFunc<S, A>, getState: () => S) => void;
declare type VariantAction<S, A> = NotFunction<A> | ThunkAction<S, A>;
declare type DispatchFunc<S, A> = (action: VariantAction<S, A>) => void;
declare function useReducerWithThunk<S, A>(reducer: Reducer<S, A>, initialState: S, name?: string): [S, DispatchFunc<S, A>];
export default useReducerWithThunk;
